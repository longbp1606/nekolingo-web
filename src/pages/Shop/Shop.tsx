import RightSidebar from '@/components/Rightbar/Rightbar';
import {
    BodyContent,
    LeftSection,
    HomeWrapper,
    HomeContent,
    DeepPracticeBox,
    SuperImage,
    Container,
    Title,
    Section,
    PinkHeartIcon,
    HeartCard,
    HeartSymbol,
    ContentArea,
    HeartTitle,
    HeartDescription,
    GradientHeartIcon,
    InfinitySymbol,
    BlueHeartIcon,
    IceSymbol,
    ProgressText,
    PurchaseButton,
    GemsIcon,
} from './Shop.styled';
import Sidebar from '@/components/Sidebar';
import { Button, Flex, InputNumber, message, Modal } from 'antd'
import chill from "@/assets/chill.gif";
import { useEffect, useState } from 'react';
import { buyItem, getShopItem, getShopStatus } from '@/services/shopAPI';
import { useDocumentTitle } from '@/hooks';
import { useSelector } from 'react-redux';
import { RootState } from '@/store';
import { depositRequest } from '@/services/walletAPI';

const Shop = () => {
    useDocumentTitle('Shop | Nekolingo');

    const balance = useSelector((state: RootState) => state.user.balance);
    const [items, setItems] = useState<any>([]);
    const [status, setStatus] = useState<any>();
    const [loading, setLoading] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [amount, setAmount] = useState(100);

    const fetchItemList = async () => {
        setLoading(true);
        try {
            const res = await getShopItem();
            const statusRes = await getShopStatus();
            setItems(res.data.items);
            setStatus(statusRes.data.status);
        } catch (error) {
            setItems([]);
        } finally {
            setLoading(false);
        }
    }

    useEffect(() => {
        fetchItemList();
    }, []);

    const postBuyItem = async (item: any) => {
        try {
            const payload = {
                item: item
            }
            const res = await buyItem(payload);
            setItems(res.data.items);
            if (res.status === 201) {
                messageApi.success('Mua v·∫≠t ph·∫©m th√†nh c√¥ng');
                fetchItemList();
            }
        } catch (error: any) {
            // console.log(error);
            messageApi.error(error.response.data.message);
        }
    }

    const createPaymentRequest = async () => {
        try {
            const res = await depositRequest(50000);
            if (res.status === 201) {
                window.location.href = res.data.url;
            }
        } catch (error: any) {
            messageApi.error(error.response.data.message);
        }
    }

    const createPaymentOrder = async (amount: number) => {
        try {
            const res = await depositRequest(amount);
            if (res.status === 201) {
                window.location.href = res.data.url;
            }
        } catch (error: any) {
            messageApi.error(error.response.data.message);
        }
    }

    const renderItem = (item: any) => {
        switch (item.item) {
            case 'HEART_REFILL':
                return (
                    <HeartCard key={item.id}>
                        <PinkHeartIcon>
                            <HeartSymbol>‚ù§Ô∏è</HeartSymbol>
                        </PinkHeartIcon>
                        <ContentArea>
                            <HeartTitle>{item.item.replaceAll('_', ' ')}</HeartTitle>
                            <ProgressText>ƒê√É TRANG B·ªä {status?.hearts} / 5</ProgressText>
                            <HeartDescription>
                                L·∫•p ƒë·∫ßy tr√°i tim ƒë·ªÉ kh√¥ng ph·∫£i lo l·∫Øng m·∫Øc l·ªói sai trong b√†i h·ªçc
                            </HeartDescription>
                        </ContentArea>
                        <PurchaseButton
                            className="buy"
                            size='large'
                            disabled={balance < item?.price}
                            onClick={() => postBuyItem(item?.item)}
                        >
                            MUA V·ªöI GI√Å: <GemsIcon>üíé</GemsIcon> {item?.price}
                        </PurchaseButton>
                    </HeartCard>
                );
                break;
            case 'STREAK_FREEZE':
                return (
                    <HeartCard key={item.item}>
                        <BlueHeartIcon>
                            <IceSymbol>üßä</IceSymbol>
                        </BlueHeartIcon>
                        <ContentArea>
                            <HeartTitle>{item?.item?.replaceAll('_', ' ')}</HeartTitle>
                            <ProgressText>{status?.is_freeze ? "ƒê√É" : "CH∆ØA"} TRANG B·ªä</ProgressText>
                            <HeartDescription style={{ marginTop: '8px' }}>
                                Streak Freeze cho ph√©p b·∫°n gi·ªØ nguy√™n streak trong m·ªôt ng√†y b·∫°n kh√¥ng c√≥ ho·∫°t ƒë·ªông n√†o.
                            </HeartDescription>
                        </ContentArea>
                        <PurchaseButton
                            className="buy"
                            size='large'
                            disabled={balance < item?.price}
                            onClick={() => postBuyItem(item?.item)}
                        >
                            MUA V·ªöI GI√Å: <GemsIcon>üíé</GemsIcon> {item.price}
                        </PurchaseButton>
                    </HeartCard>
                )
                break;
            case 'STREAK_REPAIR':
                return (
                    <HeartCard key={item.id}>
                        <GradientHeartIcon>
                            <HeartSymbol>üîß</HeartSymbol>
                        </GradientHeartIcon>
                        <ContentArea>
                            <HeartTitle>{item?.item?.replaceAll('_', ' ')}</HeartTitle>
                            <HeartDescription>
                                Streak Repair gi√∫p b·∫°n c√≥ th·ªÉ ho√†n l·∫°i streak b·ªã m·∫•t trong m·ªôt ng√†y.
                            </HeartDescription>
                        </ContentArea>
                        <PurchaseButton
                            className="buy"
                            size='large'
                            disabled={balance < item?.price}
                            onClick={() => postBuyItem(item?.item)}
                        >
                            MUA V·ªöI GI√Å: <GemsIcon>üíé</GemsIcon> {item.price}
                        </PurchaseButton>
                    </HeartCard>
                );
                break;
            case 'DOUBLE_OR_NOTHING':
                return (
                    <HeartCard key={item.id}>
                        <GradientHeartIcon>
                            <InfinitySymbol>‚≠ê</InfinitySymbol>
                        </GradientHeartIcon>
                        <ContentArea>
                            <HeartTitle>{item?.item?.replaceAll('_', ' ')}</HeartTitle>
                            <ProgressText>{status?.double_or_nothing ? "ƒê√É" : "CH∆ØA"} TRANG B·ªä</ProgressText>
                            <HeartDescription>
                                Double or Nothing gi√∫p b·∫°n c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c g·∫•p ƒë√¥i ph·∫ßn th∆∞·ªüng n·∫øu ƒë·∫°t y√™u c·∫ßu.
                            </HeartDescription>
                        </ContentArea>
                        <PurchaseButton
                            className="buy"
                            size='large'
                            disabled={balance < item?.price}
                            onClick={() => postBuyItem(item?.item)}
                        >
                            MUA V·ªöI GI√Å: <GemsIcon>üíé</GemsIcon> {item.price}
                        </PurchaseButton>
                    </HeartCard>
                );
                break;
        }
    }

    return (
        <>
            {contextHolder}
            <Sidebar />
            <BodyContent>
                <HomeWrapper>
                    <HomeContent>
                        <LeftSection>
                            <DeepPracticeBox>
                                <div className="box-header">
                                    <div className="super-label">SUPER</div>
                                    <div className="super-box">
                                        <SuperImage src={chill} alt="Super Logo" className="super-img" />
                                        <Flex vertical>
                                            <div className="box-title">ƒêƒÉng k√Ω ngay Super Nekolingo ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c nhi·ªÅu quy·ªÅn l·ª£i mi·ªÖn ph√≠</div>
                                            {/* Super Nekolingo interests list */}
                                            <ul style={{ margin: '16px 0 16px 0', padding: '0 0 0 20px', color: '#aaa', fontSize: '15px' }}>
                                                <li>Kh√¥ng gi·ªõi h·∫°n s·ªë l·∫ßn h·ªìi ph·ª•c tr√°i tim</li>
                                                <li>Truy c·∫≠p c√°c b√†i luy·ªán t·∫≠p n√¢ng cao</li>
                                                <li>Nh·∫≠n g·∫•p ƒë√¥i ph·∫ßn th∆∞·ªüng m·ªói ng√†y</li>
                                                <li>∆Øu ti√™n h·ªó tr·ª£ kh√°ch h√†ng</li>
                                                <li>Kh√¥ng qu·∫£ng c√°o l√†m phi·ªÅn</li>
                                            </ul>
                                        </Flex>
                                    </div>

                                    <Button
                                        type="primary"
                                        className="open-btn"
                                        style={{ width: '100%' }}
                                        onClick={() => createPaymentRequest()}
                                    >
                                        ƒêƒÇNG K√ù CH·ªà V·ªöI 50.000ƒë/TH√ÅNG
                                    </Button>
                                </div>
                            </DeepPracticeBox>
                            <Container>
                                <Flex justify='space-between' align='center'>
                                    <Title>Danh s√°ch v·∫≠t ph·∫©m</Title>
                                    <Button
                                        type="primary"
                                        className="open-btn mt-2"
                                        onClick={() => setIsModalOpen(true)}
                                    >
                                        + N·∫†P TI·ªÄN
                                    </Button>
                                </Flex>

                                <Section>
                                    {loading ? <div>Loading...</div> : (
                                        items?.map((item: any) => renderItem(item))
                                    )}
                                </Section>
                            </Container>
                        </LeftSection>
                        <RightSidebar />
                    </HomeContent>
                </HomeWrapper>
            </BodyContent>

            <Modal
                title="N·∫°p ti·ªÅn"
                open={isModalOpen}
                onOk={() => createPaymentOrder(amount)}
                onCancel={() => setIsModalOpen(false)}
            >
                <p>Nh·∫≠p s·ªë ti·ªÅn c·∫ßn n·∫°p</p>
                <InputNumber
                    min={100}
                    max={10000000}
                    step={100}
                    defaultValue={100}
                    addonAfter="VNƒê"
                    onChange={(value) => setAmount(value === null ? 10000 : value)}
                />
            </Modal>
        </>
    );
};
export default Shop;